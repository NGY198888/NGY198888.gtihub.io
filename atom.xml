<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>想你开心每一天</title>
  
  <subtitle>想你开心每一天</subtitle>
  <link href="/NGY198888.gtihub.io/atom.xml" rel="self"/>
  
  <link href="https://ngy198888.github.io/NGY198888.gtihub.io/"/>
  <updated>2020-07-11T18:02:08.254Z</updated>
  <id>https://ngy198888.github.io/NGY198888.gtihub.io/</id>
  
  <author>
    <name>NGY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rabbitmq安装</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%B7%A5%E5%85%B7/rabbitmq%E5%AE%89%E8%A3%85/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%B7%A5%E5%85%B7/rabbitmq%E5%AE%89%E8%A3%85/</id>
    <published>2020-07-11T17:57:03.000Z</published>
    <updated>2020-07-11T18:02:08.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h1><ul><li>otp_win64_21.0.1.exe</li><li>rabbitmq-server-3.7.17.exe</li><li>rabbitmq依赖Erlang语言作为环境语言otp_win64，不同的rabbitmq版本依赖的otp_win64版本也不同，对应的上即可</li></ul><h1 id="安装otp-win64-21-0-1-exe"><a href="#安装otp-win64-21-0-1-exe" class="headerlink" title="安装otp_win64_21.0.1.exe"></a>安装otp_win64_21.0.1.exe</h1><h1 id="环境变量的安装与验证"><a href="#环境变量的安装与验证" class="headerlink" title="环境变量的安装与验证"></a>环境变量的安装与验证</h1><ul><li>安装完成之后创建一个名为ERLANG_HOME的系统变量，其值指向erlang的安装目录</li><li>同时将%ERLANG_HOME%\bin加入到Path中，最后打开命令行，输入erl，如果出现erlang的版本信息就表示erlang语言环境安装成功；</li><li>注意：ERLANG_HOME的指向目录是bin的上级目录</li><li>erlang_home配置：<br><img src="/NGY198888.gtihub.io/2020/07/12/%E5%B7%A5%E5%85%B7/rabbitmq%E5%AE%89%E8%A3%85/11.png" alt></li></ul><h1 id="安装rabbitmq-server-3-7-17-exe"><a href="#安装rabbitmq-server-3-7-17-exe" class="headerlink" title="安装rabbitmq-server-3.7.17.exe"></a>安装rabbitmq-server-3.7.17.exe</h1><ul><li>注意，rabbitmq的默认安装目录是系统盘的Program file文件夹，但是rabbitmq其内部设置是不允许文件夹有中文，有空格的，加之功能也不适合在系统盘中，需要另外选择目录进行安装!</li><li>比如安装路径是D:\RabbitMQServer</li></ul><h1 id="开启插件"><a href="#开启插件" class="headerlink" title="开启插件"></a>开启插件</h1><ul><li>使用cmd或者powershell进入sbin目录，比如D:\RabbitMQServer\rabbitmq_server-3.7.17\sbin</li><li>运行下面几个命令<ul><li><code>./rabbitmq-plugins enable rabbitmq_management</code></li><li><code>./rabbitmq-plugins enable rabbitmq_web_stomp</code></li><li><code>./rabbitmq-plugins enable rabbitmq_web_stomp_examples</code><h1 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h1>打开服务管理器，找到RabbitMQ服务，重启服务<h1 id="添加帐号"><a href="#添加帐号" class="headerlink" title="添加帐号"></a>添加帐号</h1></li></ul></li><li>浏览器打开管理后台<a href="http://localhost:15672，">http://localhost:15672，</a></li><li>guest guest 登录，添加一个用户用于代码连接mq,我建的是admin2 admin2，分配虚拟主机 ‘/‘给该用户</li><li>由于guest不能外网登陆管理系统，所以需要再添加一个外网管理账号 admin admin，分配Admin标签给该账号<br><img src="/NGY198888.gtihub.io/2020/07/12/%E5%B7%A5%E5%85%B7/rabbitmq%E5%AE%89%E8%A3%85/22.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备文件&quot;&gt;&lt;a href=&quot;#准备文件&quot; class=&quot;headerlink&quot; title=&quot;准备文件&quot;&gt;&lt;/a&gt;准备文件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;otp_win64_21.0.1.exe&lt;/li&gt;
&lt;li&gt;rabbitmq-server-3.7.17.exe
      
    
    </summary>
    
    
      <category term="工具" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="rabbitmq" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/rabbitmq/"/>
    
      <category term="消息队列" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="mq" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/mq/"/>
    
  </entry>
  
  <entry>
    <title>nodered入门</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E7%89%A9%E8%81%94%E7%BD%91/nodered%E5%85%A5%E9%97%A8/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E7%89%A9%E8%81%94%E7%BD%91/nodered%E5%85%A5%E9%97%A8/</id>
    <published>2020-07-11T17:47:57.000Z</published>
    <updated>2020-07-11T17:55:24.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>确保安装cnpm和node</li><li>cmd运行   <code>cnpm i -g node-red</code></li></ul><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>   cmd运行 <code>node-red</code>    打开localhost:1880</p><h1 id="安装dashboard模块"><a href="#安装dashboard模块" class="headerlink" title="安装dashboard模块"></a>安装dashboard模块</h1><ul><li>在右上方的部署按钮右侧有个菜单，点击菜单，选择节点管理。</li><li>搜索“dashboard”关键字，找到<code>node-red-dashboard</code>,点击安装</li></ul><h1 id="dashboard可视化界面显示"><a href="#dashboard可视化界面显示" class="headerlink" title="dashboard可视化界面显示"></a>dashboard可视化界面显示</h1><ul><li>选择dashboard面板，可以在里面添加Tabs，Tabs添加分组，将UI节点加进分组，就 可以在管理平台显示了</li><li>双击UI节点，出现属性面板，group这里进行分组，分到对应的tab去</li><li>可视化地址localhost:1880/ui<br><img src="/NGY198888.gtihub.io/2020/07/12/%E7%89%A9%E8%81%94%E7%BD%91/nodered%E5%85%A5%E9%97%A8/1.png" alt><br><img src="/NGY198888.gtihub.io/2020/07/12/%E7%89%A9%E8%81%94%E7%BD%91/nodered%E5%85%A5%E9%97%A8/2.png" alt><br><img src="/NGY198888.gtihub.io/2020/07/12/%E7%89%A9%E8%81%94%E7%BD%91/nodered%E5%85%A5%E9%97%A8/3.png" alt><br><img src="/NGY198888.gtihub.io/2020/07/12/%E7%89%A9%E8%81%94%E7%BD%91/nodered%E5%85%A5%E9%97%A8/4.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;确保安装cnpm和node&lt;/li&gt;
&lt;li&gt;cmd运行   &lt;code&gt;cnpm i -g node-red&lt;/code&gt;&lt;/
      
    
    </summary>
    
    
      <category term="物联网" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
      <category term="物联网" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="nodered" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/nodered/"/>
    
  </entry>
  
  <entry>
    <title>前端规范</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/</id>
    <published>2020-07-11T17:41:44.000Z</published>
    <updated>2020-07-11T17:45:41.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css方面"><a href="#css方面" class="headerlink" title="css方面"></a>css方面</h1><ol><li>尽量用flex布局</li><li>使用scss</li><li>使用统一的主题参数<br><img src="/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/1.png" alt="定义全局scc"><br><img src="/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/2.png" alt="引用"></li><li>在psd设计文件里，字体只取文字颜色和大小两个参数即可，行高跟字体大小一样</li><li>边框注意使用大写的PX，别的话用小写px，后面会转换成rpx<h1 id="js方面"><a href="#js方面" class="headerlink" title="js方面"></a>js方面</h1></li><li>可以使用一些别名配置路径来简化import，就可以用绝对路径引用文件了<br><img src="/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/11.png" alt></li><li>rander方法会频繁渲染，所以里面尽量不能有代码逻辑，否则会影响运行速度</li><li>要影响到子控件的布局，在本页面加上这个参数<br>static options = {<br> addGlobalClass: true<br>}</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;css方面&quot;&gt;&lt;a href=&quot;#css方面&quot; class=&quot;headerlink&quot; title=&quot;css方面&quot;&gt;&lt;/a&gt;css方面&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;尽量用flex布局&lt;/li&gt;
&lt;li&gt;使用scss&lt;/li&gt;
&lt;li&gt;使用统一的主题参数&lt;br&gt;&lt;img
      
    
    </summary>
    
    
      <category term="前端" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="规范" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>electron问题</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/electron%E9%97%AE%E9%A2%98/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/electron%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-11T17:38:21.000Z</published>
    <updated>2020-07-11T17:39:46.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行electron打包的exe程序黑屏"><a href="#运行electron打包的exe程序黑屏" class="headerlink" title="运行electron打包的exe程序黑屏"></a>运行electron打包的exe程序黑屏</h1><p>  右键运行图标 在运行后面加参数  –disable-gpu<br>  <img src="/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/electron%E9%97%AE%E9%A2%98/1.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;运行electron打包的exe程序黑屏&quot;&gt;&lt;a href=&quot;#运行electron打包的exe程序黑屏&quot; class=&quot;headerlink&quot; title=&quot;运行electron打包的exe程序黑屏&quot;&gt;&lt;/a&gt;运行electron打包的exe程序黑屏&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="electron" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/electron/"/>
    
      <category term="桌面开发" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E6%A1%8C%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>SKU选择算法笔记</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/SKU%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/SKU%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95/</id>
    <published>2020-07-11T16:48:08.000Z</published>
    <updated>2020-07-12T17:34:26.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>   网上搜的搞不懂，记录一种自己的笨方案，代码部分涉及es6，ui渲染没有贴出来</p><h1 id="sku定义"><a href="#sku定义" class="headerlink" title="sku定义"></a>sku定义</h1><p>   SKU=Stock Keeping Unit（库存量单位）。即库存进出计量的基本单元，可以是以件，盒，托盘等为单位。SKU这是对于大型连锁超市DC（配送中心）物流管理的一个必要的方法。现在已经被引申为产品统一编号的简称，每种产品均对应有唯一的SKU号</p><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><ul><li><p>这个设计跟网上的设计有所不同，网上是用id表示唯一性的，但是这里的id不能用于sku计算</p></li><li><p>mall_goods_attr_key存放的是商品的规格组，比如某咖啡有颜色，尺码等规格组</p></li><li><p>mall_goods_attr_val存放的是商品规格组的规格值，比如某咖啡的颜色规格组有红色，白色，黑色等规格值</p></li><li><p>mall_goods_attr_sku存放的是某个具体的且有库存的sku信息，并且本方案是由具体的sku来决定自己的图片，没有图片的sku或者当没有命中sku时，显示商品默认图片<br><img src="/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/SKU%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95/1.png" alt><br><img src="/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/SKU%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95/2.png" alt><br><img src="/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/SKU%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95/3.png" alt></p><h1 id="接口返回数据"><a href="#接口返回数据" class="headerlink" title="接口返回数据"></a>接口返回数据</h1><p>sku表数据原样返回<br>key和val表数据进行了整合，每一条表示一个规格组，vals表示他有哪些规格值，key，val都是按照序号排序过的<br><img src="/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/SKU%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95/4.png" alt></p><h1 id="计算类"><a href="#计算类" class="headerlink" title="计算类"></a>计算类</h1><h2 id="说明-select-index-之前表示-当此选择的项下标，传null则代表取消勾选-后来改成直接传规格值文字了"><a href="#说明-select-index-之前表示-当此选择的项下标，传null则代表取消勾选-后来改成直接传规格值文字了" class="headerlink" title="说明 select_index 之前表示 当此选择的项下标，传null则代表取消勾选,后来改成直接传规格值文字了"></a>说明 select_index 之前表示 当此选择的项下标，传null则代表取消勾选,后来改成直接传规格值文字了</h2><pre><code class="js">import _cloneDeep from &#39;lodash/cloneDeep&#39;;export default class SkuLogic{dealImage(goods_list){     for (let index = 0; index &lt; goods_list.length; index++) {        if(goods_list[index].selectSku!=null&amp;&amp;goods_list[index].selectSku.image!=&#39;&#39;){            goods_list[index].path=goods_list[index].selectSku.image;            goods_list[index].sm_path=goods_list[index].selectSku.image;        }     }     return goods_list;}initGoodsInfo(goods_info){    goods_info.sku=this.initSkus(goods_info.sku,goods_info.skuKeyVals);    let {selectSku,skuSpecs,selectSkuTips}=this.initSkuSpecs(goods_info.sku,goods_info.skuKeyVals);    goods_info.totalStock=this.calcTotalStock(goods_info.sku)    goods_info.selectSku=selectSku    goods_info.skuSpecs=skuSpecs    goods_info.selectSkuTips=selectSkuTips    if(goods_info.skuSpecs.length==0        &amp;&amp;goods_info.sku.length==1        &amp;&amp;goods_info.selectSku        &amp;&amp;goods_info.selectSku.stock&lt;=0){        goods_info.num=0    }    return goods_info;}get_key_path(skuSpecs) {    if(skuSpecs&amp;&amp;skuSpecs.length&gt;0){        let groupName_arr=[];        for (let index = 0; index &lt; skuSpecs.length; index++) {            let groupName=skuSpecs[index].groupName||skuSpecs[index].name             groupName_arr.push(groupName)        }       return groupName_arr.join(&#39;|&#39;)    }else{        return &#39;&#39;;    }}initSkus(skus,skuKeyVals){    if(skus&amp;&amp;skus.length&gt;0){        for (let index = 0; index &lt; skus.length; index++) {            skus[index].price=parseFloat(skus[index].price||0)            skus[index].discount_price=skus[index].discount_price||skus[index].price;//没填就是原价            skus[index].discount_price=parseFloat(skus[index].discount_price)            skus[index].stock=parseFloat(skus[index].stock||0)            skus[index].attr_path=skus[index].attr_path||&#39;&#39;            skus[index].sku_key_path=this.get_key_path(skuKeyVals);            skus[index].sku_val_path=skus[index].attr_path            skus[index].image=skus[index].image||&#39;&#39;        }    }    return skus;}//获取sku的规格组initSkuSpecs(skus,skuKeyVals) {    let  skuSpecs=[];    let  selectSku=null;    if(skuKeyVals&amp;&amp;skuKeyVals.length&gt;0)    {        let select_able_ranges=init_select_able_ranges(skuKeyVals);//每组可选范围        select_able_ranges= init_ranges_by_stock(skus,select_able_ranges);        if(skuKeyVals&amp;&amp;skuKeyVals.length&gt;0){            for (let index = 0; index &lt; skuKeyVals.length; index++) {                let vals=(skuKeyVals[index][&#39;vals&#39;]||&#39;&#39;).split(&#39;|&#39;);                skuSpecs[index]=                {                    groupName:skuKeyVals[index][&#39;name&#39;],                    spec_list:vals,                    select_index:null,                    //交集                    select_able_range:select_able_ranges[index]                };             }        }    }    selectSku= this.calcSelectSku(skus,skuSpecs);    let selectSkuTips=this.calcSelectSkuTips(selectSku,skuSpecs,skus);    return {selectSku,skuSpecs,selectSkuTips};}/** * 重新计算sku规格信息  * @param {*} skus 数据库拿到的sku数据 * @param {*} skuKeyVals 数据库拿到的skuKeyVals数据 * @param {*} skuSpecs 带有选中信息的sku结构 * @param {*} group_index 当此选择的组下标 * @param {*} select_index  当此选择的项下标，传null则代表取消勾选 */calcSkuSpecs(skus,skuKeyVals,skuSpecs,group_index,select_index,_selectSku) {    let  selectSku=null;    let checkSpec_arr=[];//已经选择过的sku规格    if(skuSpecs[group_index].select_able_range.find(val=&gt;val== select_index)){        //只响应可选的项        skuSpecs[group_index].select_index=skuSpecs[group_index].select_index==select_index?null:select_index;//前后相等表示取消选择        let select_able_ranges=init_select_able_ranges(skuKeyVals);//每组可选范围        select_able_ranges= init_ranges_by_stock(skus,select_able_ranges);        if(skus&amp;&amp;skus.length&gt;0){            //模拟手动选择过程            skuSpecs.map((skuSpec,index)=&gt;{                if(skuSpec.select_index!=null){                  let {select_able_ranges2,checkSpec_arr2}=checkSpec(skus,skuSpecs,select_able_ranges,index,skuSpec.select_index,checkSpec_arr);                  select_able_ranges=select_able_ranges2;                  checkSpec_arr=checkSpec_arr2;                }            })            skuSpecs= skuSpecs.map((skuSpec,index)=&gt;{                skuSpec.select_able_range=select_able_ranges[index];                 return skuSpec;            })        }        selectSku=this.calcSelectSku(skus,skuSpecs);    }else{        selectSku=_selectSku;    }    let selectSkuTips=this.calcSelectSkuTips(selectSku,skuSpecs,skus);    return {selectSku,skuSpecs:_cloneDeep(skuSpecs),selectSkuTips};}calcSelectSkuTips(selectSku,skuSpecs,skus){    if(!skus||skus.length==0){        return &#39;未设置规格&#39;    }    if(selectSku){        if(selectSku[&#39;attr_path&#39;]||&#39;&#39;!=&quot;&quot;){            let attrs = (selectSku[&#39;attr_path&#39;]||&#39;&#39;).split(&#39;|&#39;);            return &#39;已选 &quot;&#39;+attrs.join(&#39;&quot;,&quot;&#39;)+&#39;&quot;&#39;;        }        else{            return &#39;&#39;        }    }else{        let unSelect=[];        for (let index = 0; index &lt; skuSpecs.length; index++) {            if(skuSpecs[index].select_index==null){                unSelect.push(skuSpecs[index].groupName);            }        }        return &#39;请选择 &quot;&#39;+unSelect.join(&#39;&quot;,&quot;&#39;)+&#39;&quot;&#39;;    }}/** * 计算选择了哪个sku * @param {*} skus  * @param {*} skuSpecs  */calcSelectSku(skus,skuSpecs){    let  selectSku=null;    let  path_now=[];    if(skuSpecs.length==0||skus&amp;&amp;skus.length==1||(skus.length==1)){//&amp;&amp;skus[0][&#39;attr_path&#39;]==&#39;&#39;        selectSku=skus[0]    }else{        for (let index = 0; index &lt; skuSpecs.length; index++) {            if(skuSpecs[index].select_index!=null){                path_now.push(skuSpecs[index].select_index)            }        }        let path_str= path_now.join(&quot;|&quot;)        let sku_now= skus.find(sku=&gt;(sku[&#39;attr_path&#39;]||&#39;&#39;)==path_str)        if(sku_now){            selectSku=sku_now        }    }    return selectSku;}/** sku总库存 */calcTotalStock(skus){     let stock=0;     for (let index = 0; index &lt; skus.length; index++) {        stock+=parseFloat(skus[index].stock);     }     return stock;}}/** * 每次计算选择的某一组对当前select_able_ranges的影响 * @param {*} skus  * @param {*} skuSpecs  * @param {*} select_able_ranges  * @param {*} group_index  * @param {*} select_text  * @returns select_able_ranges2 被影响后的select_able_ranges */function checkSpec(skus,skuSpecs,select_able_ranges,group_index,select_text,checkSpec_arr2){    let select_able_ranges2=[];//每组可选范围    //let select_text=select_text    let select_text_arr=[];    checkSpec_arr2.push(skuSpecs[group_index]);    for (let index = 0; index &lt; checkSpec_arr2.length; index++) {        select_text_arr.push(checkSpec_arr2[index].select_index) ;    }    let select_able_specOne=[];//重新拿到有库存的规格，用于过滤未选的sku规格    skus.map((sku)=&gt;{        if(parseFloat(sku[&#39;stock&#39;])&gt;0&amp;&amp;isContained((sku[&#39;attr_path&#39;]||&#39;&#39;).split(&#39;|&#39;),select_text_arr)){            let attrs = (sku[&#39;attr_path&#39;]||&#39;&#39;).split(&#39;|&#39;);            select_able_specOne = Array.from(new Set([...select_able_specOne, ...attrs])); // 并集        }    })    for (let index = 0; index &lt; select_able_ranges.length; index++) {        let _i=select_text_arr.findIndex(text=&gt;text==skuSpecs[index].select_index);        if(skuSpecs[index].select_index!=null&amp;&amp;_i&gt;-1){            //已选的sku规格，用除了自己之外的已选sku规格来决定他自己哪些能选           let select_text_arr2=select_text_arr.filter(text=&gt;text!=skuSpecs[index].select_index);            let select_able_specOne2=[];            skus.map((sku)=&gt;{                if(parseFloat(sku[&#39;stock&#39;])&gt;0&amp;&amp;isContained((sku[&#39;attr_path&#39;]||&#39;&#39;).split(&#39;|&#39;),select_text_arr2)){                    let attrs = (sku[&#39;attr_path&#39;]||&#39;&#39;).split(&#39;|&#39;);                    select_able_specOne2 = Array.from(new Set([...select_able_specOne2, ...attrs])); // 并集                }            })            select_able_ranges2[index]=Array.from(new Set([...select_able_ranges[index]].filter(x =&gt; new Set(select_able_specOne2).has(x))))        }else{            select_able_ranges2[index]=Array.from(new Set([...select_able_ranges[index]].filter(x =&gt; new Set(select_able_specOne).has(x))))        }    }    return {select_able_ranges2,checkSpec_arr2}}//是否被包含,是返回true,不是返回falsefunction  isContained (a, b){    if(!(a instanceof Array) || !(b instanceof Array)) return false;    if(a.length &lt; b.length) return false;    var aStr = a.toString();    for(var i = 0, len = b.length; i &lt; len; i++){    if(aStr.indexOf(b[i]) == -1) return false;    }    return true;}/*** 初始化 select_able_ranges* @param {*} skuKeyVals */function init_select_able_ranges(skuKeyVals){    let select_able_ranges=[];//每组可选范围    if(skuKeyVals&amp;&amp;skuKeyVals.length&gt;0){        for (let index = 0; index &lt; skuKeyVals.length; index++) {            let vals=(skuKeyVals[index][&#39;vals&#39;]||&#39;&#39;).split(&#39;|&#39;);            select_able_ranges[index]=vals;        }    }    return select_able_ranges;    }/*** 计算库存对select_able_ranges的影响* @param {*} skus * @param {*} select_able_ranges */function init_ranges_by_stock(skus,select_able_ranges) {    let select_able_specs = [];    if (skus &amp;&amp; skus.length &gt; 0) {        skus.map((sku) =&gt; {            if (parseFloat(sku[&#39;stock&#39;] ) &gt; 0) {                let attrs = (sku[&#39;attr_path&#39;] || &#39;&#39;).split(&#39;|&#39;);                select_able_specs = Array.from(new Set([...select_able_specs, ...attrs])); // 并集            }        });    }    for (let index = 0; index &lt; select_able_ranges.length; index++) {        select_able_ranges[index]= Array.from(new Set([...select_able_specs].filter(x =&gt;new Set( select_able_ranges[index]).has(x))))    }    return select_able_ranges;}</code></pre></li></ul><h1 id="字段定义"><a href="#字段定义" class="headerlink" title="字段定义"></a>字段定义</h1><ul><li>拿到商品信息GoodsInfo,即3步骤的数据结构，调用initGoodsInfo进行初始化<code>GoodsInfo=skuLogic.initGoodsInfo(GoodsInfo);</code>这之后，GoodsInfo里会多出三个数据结构</li><li><code>selectSku</code> 命中的sku，没有命中时是null</li><li><code>selectSkuTips</code> 选择提示，没有命中时，提示选择余下的规格组，命中后提示选了哪些规格值</li><li><code>skuSpecs</code>用于渲染界面，也用于计算sku，每一项表示一个规格组</li><li><code>select_able_ranges</code>表示可选的规格值</li><li><code>select_index</code>表示选中的规格值，null表示未选择</li><li><code>spec_list</code>表示所有规格值<h1 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h1></li><li>有四种类型的规格值<ul><li>不可选</li><li>在已选择列可选且已选中的规格值</li><li>在未选择列的可选规格值</li><li>在已选择列其他可选规格值</li></ul></li><li>初始化的时候，查询sku列表能知道哪些是永远不可选的，哪些是可选的</li><li>当做一次选择的时候<ul><li>2类型的规格值是知道的，你选了哪些规格值就是哪些，</li><li>3类型的规格值确定，由包含已选路径的sku来确定</li><li>4类型的规格值确定，当你要确定某一个已选列的其他可选规格值的时候，已选路径去掉当前列已选规格值，作为新的已选路径，由包含新的已选路径的sku来确定4类型的点</li><li>其他的就是1类型的规格值</li><li>四种类型的规格值构成skuSpecs</li><li>已选路径能确定是否命中sku</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;   网上搜的搞不懂，记录一种自己的笨方案，代码部分涉及es6，ui渲染没有贴出来&lt;/p&gt;
&lt;h1 id=&quot;sku定义&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="SKU" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/SKU/"/>
    
      <category term="商城" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E5%95%86%E5%9F%8E/"/>
    
      <category term="最小库存单元" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E6%9C%80%E5%B0%8F%E5%BA%93%E5%AD%98%E5%8D%95%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>centos包装服务systemctl</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%90%8E%E7%AB%AF/centos%E5%8C%85%E8%A3%85%E6%9C%8D%E5%8A%A1systemctl/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%90%8E%E7%AB%AF/centos%E5%8C%85%E8%A3%85%E6%9C%8D%E5%8A%A1systemctl/</id>
    <published>2020-07-11T16:42:58.000Z</published>
    <updated>2020-07-11T16:46:49.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将frpc包装成服务，开机启动"><a href="#将frpc包装成服务，开机启动" class="headerlink" title="将frpc包装成服务，开机启动"></a>将frpc包装成服务，开机启动</h1><h2 id="在frpc执行文件目录下打pwd，找到当前路径，比如-root-frp-0-33-0-linux-amd64"><a href="#在frpc执行文件目录下打pwd，找到当前路径，比如-root-frp-0-33-0-linux-amd64" class="headerlink" title="在frpc执行文件目录下打pwd，找到当前路径，比如/root/frp_0.33.0_linux_amd64/"></a>在frpc执行文件目录下打pwd，找到当前路径，比如/root/frp_0.33.0_linux_amd64/</h2><h2 id="新建frpc-service文件"><a href="#新建frpc-service文件" class="headerlink" title="新建frpc.service文件"></a>新建frpc.service文件</h2><p>编辑内容</p><pre><code class="js">[Unit]Description=Frp Client ServiceAfter=network.target[Service]Type=simpleUser=rootRestart=on-failureRestartSec=5sExecStart=/root/frp_0.33.0_linux_amd64/frpc -c /root/frp_0.33.0_linux_amd64/frpc.iniExecReload=/root/frp_0.33.0_linux_amd64/frpc reload -c /root/frp_0.33.0_linux_amd64/frpc.ini[Install]WantedBy=multi-user.target</code></pre><h2 id="将上面的文件复制到-usr-lib-systemd-system目录下"><a href="#将上面的文件复制到-usr-lib-systemd-system目录下" class="headerlink" title="将上面的文件复制到 /usr/lib/systemd/system目录下"></a>将上面的文件复制到 /usr/lib/systemd/system目录下</h2><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>   <code>systemctl start frpc</code></p><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><p>   <code>systemctl enable frpc</code></p><h2 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h2><p>   <code>systemctl status frpc</code><br>   当看到 <code>Active: active (running)</code>，即为已启动成功，其他的状态是未启动成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;将frpc包装成服务，开机启动&quot;&gt;&lt;a href=&quot;#将frpc包装成服务，开机启动&quot; class=&quot;headerlink&quot; title=&quot;将frpc包装成服务，开机启动&quot;&gt;&lt;/a&gt;将frpc包装成服务，开机启动&lt;/h1&gt;&lt;h2 id=&quot;在frpc执行文件目录下打
      
    
    </summary>
    
    
      <category term="后端" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="contos" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/contos/"/>
    
      <category term="服务" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>taro笔记</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/taro%E7%AC%94%E8%AE%B0/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%89%8D%E7%AB%AF/taro%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-11T16:35:49.000Z</published>
    <updated>2020-07-11T16:38:41.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分享的问题"><a href="#分享的问题" class="headerlink" title="分享的问题"></a>分享的问题</h1><p>  onShareAppMessage是分享前的拦截函数，我们在这里设置分享标题和要跳转的链接，但是它只在页面生效，如果是在组件里面写onShareAppMessage，是不会触发的。组件和页面之间隔了很多层级，props传递就导致很多中间组件需要调整，不好处理。</p><ul><li><h1 id="处理方案"><a href="#处理方案" class="headerlink" title="处理方案"></a>处理方案</h1><ul><li><p>修改组件和页面的代码</p><ul><li><p>组件修改:分享按钮带上data-title，data-path，这是onShareAppMessage返回需要的数据结构<br><code>&lt;Button data-title={&quot;好运分享&quot;} data-path={&#39;xxxx?id=xxx&#39;} openType=&quot;share&quot;&gt;分享&lt;/Button&gt;</code></p></li><li><p>页面修改onShareAppMessage，ops.target.dataset里面包含了title，path</p><pre><code class="js">onShareAppMessage(ops){    return ops.target.dataset;}</code></pre></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分享的问题&quot;&gt;&lt;a href=&quot;#分享的问题&quot; class=&quot;headerlink&quot; title=&quot;分享的问题&quot;&gt;&lt;/a&gt;分享的问题&lt;/h1&gt;&lt;p&gt;  onShareAppMessage是分享前的拦截函数，我们在这里设置分享标题和要跳转的链接，但是它只在页面生效，
      
    
    </summary>
    
    
      <category term="前端" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="taro" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/taro/"/>
    
      <category term="小程序" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>jar包部署为windows服务</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%90%8E%E7%AB%AF/jar%E5%8C%85%E9%83%A8%E7%BD%B2%E4%B8%BAwindows%E6%9C%8D%E5%8A%A1/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%90%8E%E7%AB%AF/jar%E5%8C%85%E9%83%A8%E7%BD%B2%E4%B8%BAwindows%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-07-11T16:20:14.000Z</published>
    <updated>2020-07-11T16:32:58.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><ul><li>已经安装并配置好jdk</li><li>有.NET4运行环境</li><li>准备好可运行jar包</li><li>下载好文件 <a href="https://github.com/kohsuke/winsw/releases/download/winsw-v2.2.0/sample-minimal.xml" target="_blank" rel="noopener">sample-minimal.xml</a> ，<a href="https://github.com/kohsuke/winsw/releases/download/winsw-v2.2.0/WinSW.NET4.exe" target="_blank" rel="noopener">WinSW.NET4.exe</a></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>  下载WinSW到jar目录下，sample-minimal.xml，WinSW.NET4.exe，统一两个的文件名为WinSW，假设jar文件是IntelligenScale.jar</p><h1 id="修改WinSW-xml配置"><a href="#修改WinSW-xml配置" class="headerlink" title="修改WinSW.xml配置"></a>修改WinSW.xml配置</h1><pre><code class="xml">  &lt;configuration&gt;  &lt;!-- ID of the service. It should be unique accross the Windows system--&gt;  &lt;id&gt;IntelligenScale&lt;/id&gt;  &lt;!-- Display name of the service --&gt;  &lt;name&gt;IntelligenScale&lt;/name&gt;  &lt;!-- Service description --&gt;  &lt;description&gt;电子秤数据采集服务&lt;/description&gt;  &lt;!-- Path to the executable, which should be started --&gt;  &lt;executable&gt;java&lt;/executable&gt;  &lt;arguments&gt;-jar IntelligenScale.jar&lt;/arguments&gt;  &lt;startmode&gt;Automatic&lt;/startmode&gt;  &lt;log mode=&quot;append&quot;&gt;  &lt;logpath&gt;logs/service.log&lt;/logpath&gt;  &lt;/log&gt;&lt;/configuration&gt;</code></pre><h1 id="创建运行文件"><a href="#创建运行文件" class="headerlink" title="创建运行文件"></a>创建运行文件</h1><ul><li>安装服务(超管运行).bat <code>java -jar IntelligenScale.jar</code></li><li>卸载服务(超管运行).bat <code>WinSW.exe uninstall</code></li><li>运行这两个文件即可完成安装和卸载</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境要求&quot;&gt;&lt;a href=&quot;#环境要求&quot; class=&quot;headerlink&quot; title=&quot;环境要求&quot;&gt;&lt;/a&gt;环境要求&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;已经安装并配置好jdk&lt;/li&gt;
&lt;li&gt;有.NET4运行环境&lt;/li&gt;
&lt;li&gt;准备好可运行jar包&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="后端" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/java/"/>
    
      <category term="jar" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/jar/"/>
    
      <category term="windows服务" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/windows%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>java上传文件流到php服务器</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%90%8E%E7%AB%AF/java%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%B5%81%E5%88%B0php%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%90%8E%E7%AB%AF/java%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%B5%81%E5%88%B0php%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-07-11T16:14:04.000Z</published>
    <updated>2020-07-11T16:19:16.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>  我的思路，通过http的post提交，post主要参数：</p><ul><li>file(即byte[]文件流)</li><li>ext(文件扩展名)<h1 id="mvn依赖"><a href="#mvn依赖" class="headerlink" title="mvn依赖"></a>mvn依赖</h1></li><li>httpclient(发起请求)</li><li>httpmime(使用到MultipartEntityBuilder)</li><li>fastjson(解析结果)<h1 id="java上传代码"><a href="#java上传代码" class="headerlink" title="java上传代码"></a>java上传代码</h1><pre><code class="java">/*** 将文件提交至文件服务器* @param fileByte 文件对象* @return FileStatus 上传结果*/public static ApiResult postFile(String url,byte[] fileByte, HashMap&lt;String,String&gt; paramsMap) {CloseableHttpClient httpclient = HttpClients.createDefault();CloseableHttpResponse response = null;ApiResult res=new ApiResult();try {    HttpPost httpPost = new HttpPost(url);//&quot;http://localhost:8844/common/Comm_Api/streamuploader?XDEBUG_SESSION_START=19300&quot;    MultipartEntityBuilder mEntityBuilder = MultipartEntityBuilder.create();    mEntityBuilder.addBinaryBody(&quot;file&quot;, fileByte);    if(paramsMap.size()&gt;0){        Set&lt;String&gt; keySet = paramsMap.keySet();        for(String key:keySet) {            String value = paramsMap.get(key);            mEntityBuilder.addTextBody(key,value);        }    }    httpPost.setEntity(mEntityBuilder.build());    response = httpclient.execute(httpPost);    int statusCode = response.getStatusLine().getStatusCode();    if (statusCode == HttpStatus.SC_OK) {        HttpEntity resEntity = response.getEntity();        String  rs = EntityUtils.toString(resEntity);        // 消耗掉response        EntityUtils.consume(resEntity);        try{            if(!&quot;&quot;.equals(rs)&amp;&amp;!&quot;Read timed out&quot;.equals(rs))                res=JSONObject.parseObject(rs, ApiResult.class);        }catch (Exception e){  }        if(res.getCode()!=0){            LogTool.getLogger().warn(&quot;http请求异常 url:&quot;+url+&quot; 结果：&quot;+rs);        }    }else{        LogTool.getLogger().warn(&quot;http请求异常 url:&quot;+url+&quot; 结果：statusCode&quot;+statusCode);    }} catch (ParseException e) {    e.printStackTrace();} catch (IOException e) {    e.printStackTrace();} finally {    HttpClientUtils.closeQuietly(httpclient);    HttpClientUtils.closeQuietly(response);}return res;}</code></pre><h1 id="php接收代码-使用到了tp5框架"><a href="#php接收代码-使用到了tp5框架" class="headerlink" title="php接收代码 使用到了tp5框架"></a>php接收代码 使用到了tp5框架</h1><pre><code class="php">接口代码：/**接收文件流* 参数file 文件流* 参数ext 保存文件的扩展名* @return \app\common\webapi\Array|void*/function  streamuploader(){$streamData = isset($_POST[&#39;file&#39;])? $_POST[&#39;file&#39;] : &#39;&#39;;$ext = isset($_POST[&#39;ext&#39;])? $_POST[&#39;ext&#39;] : &#39;&#39;;$rs=(new Streamuploader())-&gt;receiveStreamFile($streamData,$ext);if($rs[&quot;ok&quot;]){    return Web::ok($rs[&quot;path&quot;]);}else{    return Web::err(&quot;上传失败&quot;.$rs[&quot;err&quot;]);}}</code></pre></li></ul><p>保存文件流代码：<br>/**接收保存流文件</p><ul><li>@param string $streamData 文件流</li><li>@param string $ext   扩展名</li><li>@return array ok=true表示保存成功</li><li>/<br>function receiveStreamFile(string $streamData,string $ext){<br>  $rs=[“ok”=&gt;false,”path”=&gt;””,”err”=&gt;””];<br>  try{<pre><code>  if(!empty($streamData)&amp;&amp;!empty($ext)){      $ext=strtolower($ext);      $uuid=uniqid(&quot;cam_&quot;);      $uploadDir = &#39;uploads/Images&#39;;      if($ext==&quot;flv&quot;){          $uuid=uniqid(&quot;video_&quot;);          $uploadDir = &#39;uploads/sf_video/&#39;.date(&quot;Y-m-d&quot;);      }      // 创建目标目录      if (!file_exists($uploadDir)) {          mkdir($uploadDir,0777,true);//mkdir() 函数创建目录。      }      $path=$uploadDir.&quot;/&quot;.$uuid.&quot;.&quot;.$ext;      file_put_contents($path, $streamData, true);      $rs[&quot;ok&quot;]=true;      $rs[&quot;path&quot;]=$path;  }</code></pre>  }catch (Exception $exception){<pre><code>  $rs[&quot;err&quot;]=$exception-&gt;getMessage();  Log::error(&quot;保存文件流失败 &quot;.$exception-&gt;getMessage().&quot;|&quot;.$exception-&gt;getTraceAsString());</code></pre>  }<br>  return $rs;<br>}</li></ul><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;  我的思路，通过http的post提交，post主要参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file(即byte[]文件流)&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="后端" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/java/"/>
    
      <category term="上传" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="php" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Git操作</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%B7%A5%E5%85%B7/Git%E6%93%8D%E4%BD%9C/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%B7%A5%E5%85%B7/Git%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-11T16:11:17.000Z</published>
    <updated>2020-07-16T10:40:01.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1，第一次建立分支"><a href="#1，第一次建立分支" class="headerlink" title="1，第一次建立分支"></a>1，第一次建立分支</h2><ul><li>在github创建分支source，到setting里找到分支，将默认分支设置问source</li><li>执行命令克隆项目 <code>git clone https://github.com/NGY198888/NGY198888.gtihub.io.git</code></li><li>我是在F:\work\temp\hexo\source目录执行上面的命令，出现一个NGY198888.gtihub.io子目录</li><li>cd 到子目录，将博客源码复制到该目录</li><li>执行下面的命令，将源码保存到source分支<pre><code class="cmd">git add .  //添加文件git commit -m &quot;描述&quot; //添加文件的描述git push origin source    //推送到github的source分支</code></pre></li></ul><pre><code>## 修改文件，并提交github,三步走  + 修改README.md文件  + 执行`git add .`，将所有修改的文件从工作区添加到暂存区  + 执行`git commit -m &quot;我在测试修改文件并提交&quot;` git commit 主要是将暂存区里的改动给提交到本地的版本库  + 执行`git push origin source` 将本地版本库的分支推送到远程服务器上对应的分支## Git代码提交流程### 简单的代码提交流程  + git status 查看工作区代码相对于暂存区的差别  + git add . 将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录  + git commit -m ‘注释’ 将缓存区内容添加到本地仓库  + git push origin master 将本地版本库推送到远程服务器，origin是远程主机，master表示是远程服务器上的master分支，分支名是可以修改的### Git add&gt; git add [参数] &lt;路径&gt;　作用就是将我们需要提交的代码从工作区添加到暂存区，就是告诉git系统，我们要提交哪些文件，之后就可以使用git commit命令进行提交了。 为了方便下面都用 . 来标识路径， . 表示当前目录，路径可以修改，下列操作的作用范围都在版本库之内。#### git add .&gt;不加参数默认为将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除#### git add -u .&gt;-u 表示将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。#### git add -A .&gt;-A 表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。### Git commit&gt; git commit 主要是将暂存区里的改动给提交到本地的版本库。每次使用git commit 命令我们都会在本地版本库生成一个40位的哈希值，这个哈希值也叫commit-id， commit-id 在版本回退的时候是非常有用的，它相当于一个快照,可以在未来的任何时候通过与git reset的组合命令回到这里.#### git commit -m ‘message’&gt;-m 参数表示可以直接输入后面的“message”，如果不加 -m参数，那么是不能直接输入message的，而是会调用一个编辑器一般是vim来让你输入这个message，message即是我们用来简要说明这次提交的语句。#### git commit -am ‘message’ -am等同于-a -m&gt;-a参数可以将所有已跟踪文件中的执行修改或删除操作的文件都提交到本地仓库，即使它们没有经过git add添加到暂存区，注意: 新加的文件（即没有被git系统管理的文件）是不能被提交到本地仓库的。### Git push&gt; 在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了。 git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt; &lt;远程分支名&gt; ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名。第一个master是本地分支名，第二个master是远程分支名。#### git push origin master&gt;如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建#### git push origin ：refs/for/master&gt;如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete master#### git push origin&gt;如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支#### git push&gt;如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名 关于 refs/for：refs/for 的意义在于我们提交代码到服务器之后是需要经过code review 之后才能进行merge的，[原文链接](https://blog.csdn.net/qq_37577660/article/details/78565899)# 2，记一次git操作 &gt;目的是将joy_common提交到git &gt;我的git上有个JAVA的库，没有可以新建一个，我打算提交到这里，下面是操作  + 在本地joy_common同级目录下执行的`git clone https://github.com/NGY198888/JAVA.git .`，报错`fatal: destination path &#39;.&#39; already exists and is not an empty directory.`可能非空目录有这个问题  + 执行`git clone https://github.com/NGY198888/JAVA.git`，会拉取到JAVA目录，  + 将里面的.git复制到joy_common同级目录下  + 执行`git reset --hard HEAD`，进行同步，下面就可以正常操作了  + 执行`git add joy_common`  + 执行`git commit -m &quot;添加common&quot;`  + 执行`git push`没问题的话，jor_common就已经提交到GitHub了# 使用bat提交 + 新建一个.bat文件 + 编写代码``` cmd@echo offecho &quot;-------请输入本次更新描述----------------&quot;set /p msg=git add .git commit -m &quot;提交修改 %msg%&quot;git pullgit push  origin sourceecho &quot;--------提交完成--------------&quot;pause</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1，第一次建立分支&quot;&gt;&lt;a href=&quot;#1，第一次建立分支&quot; class=&quot;headerlink&quot; title=&quot;1，第一次建立分支&quot;&gt;&lt;/a&gt;1，第一次建立分支&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在github创建分支source，到setting里找到分支，将默认分
      
    
    </summary>
    
    
      <category term="工具" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/git/"/>
    
      <category term="bat" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/bat/"/>
    
      <category term="批处理" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>IDEA问题</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%B7%A5%E5%85%B7/IDEA%E9%97%AE%E9%A2%98/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/12/%E5%B7%A5%E5%85%B7/IDEA%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-11T16:11:17.000Z</published>
    <updated>2020-07-11T16:12:46.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-找不到符号符号-类-JSerialComm-位置-程序包-joy-comport"><a href="#java-找不到符号符号-类-JSerialComm-位置-程序包-joy-comport" class="headerlink" title="java: 找不到符号符号:   类 JSerialComm  位置: 程序包 joy.comport"></a>java: 找不到符号符号:   类 JSerialComm  位置: 程序包 joy.comport</h1><p>  把找不到的模块(比如joy_common)移除，然后重新添加该模块，设置好java编译版本</p><h1 id="java-jar-执行jar包出现-java-lang-NoClassDefFoundError"><a href="#java-jar-执行jar包出现-java-lang-NoClassDefFoundError" class="headerlink" title="java -jar 执行jar包出现 java.lang.NoClassDefFoundError"></a>java -jar 执行jar包出现 java.lang.NoClassDefFoundError</h1><p>  在IDEA里，删除Artifacts配置，重新添加配置生成jar</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-找不到符号符号-类-JSerialComm-位置-程序包-joy-comport&quot;&gt;&lt;a href=&quot;#java-找不到符号符号-类-JSerialComm-位置-程序包-joy-comport&quot; class=&quot;headerlink&quot; title=&quot;ja
      
    
    </summary>
    
    
      <category term="工具" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="java" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/java/"/>
    
      <category term="IDEA" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq，taro,小程序，stomp</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/11/%E5%89%8D%E7%AB%AF/rabbitmq%EF%BC%8Ctaro-%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%8Cstomp/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/11/%E5%89%8D%E7%AB%AF/rabbitmq%EF%BC%8Ctaro-%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%8Cstomp/</id>
    <published>2020-07-10T19:00:55.000Z</published>
    <updated>2020-07-11T16:05:05.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="stompjs下载，（不要用npm安装stomp）"><a href="#stompjs下载，（不要用npm安装stomp）" class="headerlink" title="stompjs下载，（不要用npm安装stomp）"></a>stompjs下载，（不要用npm安装stomp）</h2><p><a href="https://github.com/rabbitmq/rabbitmq-web-stomp-examples/tree/master/priv" target="_blank" rel="noopener">下载地址</a></p><h2 id="rabbitmq的连接配置"><a href="#rabbitmq的连接配置" class="headerlink" title="rabbitmq的连接配置"></a>rabbitmq的连接配置</h2><p><img src="https://img-blog.csdnimg.cn/20200701174211411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05HWTE5ODg4OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="基于Taro，stomp的RabbitMQ消费者实现"><a href="#基于Taro，stomp的RabbitMQ消费者实现" class="headerlink" title="基于Taro，stomp的RabbitMQ消费者实现"></a>基于Taro，stomp的RabbitMQ消费者实现</h2><pre><code class="javascript">import config from  &#39;./config&#39;import {Stomp as stompjs} from &#39;./stomp&#39;import Taro from &#39;@tarojs/taro&#39;import { isString } from &#39;lodash&#39;;//MQ消费者,用于订阅RabbitMQ队列//用法// let mqConsumer=  MqConsumer.subscribe_queue(&quot;队列名&quot;,(data) =&gt; {//     //收到数据//     let msg =JSON.parse(data.body); //     console.log(&quot;mq消息&quot;,msg);//     pd_layer.msg(data.body);// })// setTimeout(function(){//   mqConsumer.send({a:1});// }export default class MqConsumer{    serverUrl=null;    ws=null;    client=null;    queue=null;    onMsg=null;    count=0;    t=null;    MAX=200;    socketOpen=false;    sendMsgQueue = []    constructor(queue,onMsg){        this.queue=queue;        this.onMsg=onMsg;        this.serverUrl = config.hostname+&quot;:&quot;+config.port;  // rabbitmq服务的地址与端口号        this.connect();     }    send(msg){        let that=this;        if(msg){            if (that.socketOpen) {                that.client.send(that.queue,{},isString(msg)?msg:JSON.stringify(msg));            } else {                that.sendMsgQueue.push(msg)            }        }    }    connect(){        // 初始化 ws 对象        this.socketOpen = false        let that=this;        function sendSocketMessage(msg) {            if(msg){                if (that.socketOpen) {                    Taro.sendSocketMessage({                        data: msg                    })                } else {                    that.sendMsgQueue.push(msg)                }            }        }        /////////////////////////////////////////////////////        this.ws = { send: sendSocketMessage,  onopen: null,  onmessage: null }        Taro.connectSocket({            url: `ws://${this.serverUrl}/ws`        }).then(st=&gt;{            this.ws.st=st;        })        Taro.onSocketOpen(function (res) {            console.log(&#39;WebSocket连接已打开！&#39;)            that.socketOpen = true            for (var i = 0; i &lt; that.sendMsgQueue.length; i++) {                sendSocketMessage(that.sendMsgQueue[i])            }            that.sendMsgQueue = []            that.ws.onopen &amp;&amp; that.ws.onopen()        })        Taro.onSocketMessage(function (res) {            console.log(&#39;ws消息:&#39;)            that.ws.onmessage &amp;&amp; that.ws.onmessage(res)        })        Taro.onSocketError(function (res) {            console.log(&#39;ws异常！&#39;,res)            that.socketOpen = false            that.reConnect(that);        })        Taro.onSocketClose(function (res) {            console.log(&#39;ws断开！&#39;,res)            that.socketOpen = false            that.reConnect(that);        })        this.setClient();    }    setClient(){        // 获得Stomp client对象        stompjs.setInterval = function () { }        stompjs.clearInterval = function () { }        this.client = stompjs.over(this.ws);        // 设置心跳        this.client.heartbeat.outgoing = 0        this.client.heartbeat.incoming = 0        // 定义连接成功回调函数        let onConnect = () =&gt; {            console.log(&#39;连接MQ成功&#39;)            var headers ={};            //  headers.durable=false;            //  headers[&#39;auto-delete&#39;]=false;            //  headers[&#39;exclusive&#39;]=false;            this.client.subscribe(this.queue, this.onMsg||(function(data) {                var msg = data.body;                console.log(&quot;MQ消息：&quot; + msg);            }),headers);                }        let that=this;        let _onError =(err) =&gt; {            console.log(&quot;mq异常&quot;,err)            that.reConnect(that);        }        // 定义客户端信息        let clientInfo = {            login: config.user,            passcode: config.password,            host:&#39;/&#39;,        }        // 连接rabbitmq        this.client.connect(clientInfo, onConnect, _onError)  // 用户名，密码，成功回调，错误回调，主机    }    reConnect(that){        that.count ++;        console.log(&quot;ws重连...【&quot; + that.count + &quot;】&quot;);        //1与服务器已经建立连接        if ( that.ws.st.readyState === 1) {            clearTimeout(that.t);            that.t=null;            that.count=0;        } else if(that.count &gt;= that.MAX){            alert(&quot;重连失败超过设定次数...&quot;);        }else {            //2已经关闭了与服务器的连接            if (that.ws.st.readyState === 3) {                that.connect();            }            that.t&amp;&amp;clearTimeout(that.t);            //0正尝试与服务器建立连接,2正在关闭与服务器的连接            that.t = setTimeout(function() {that.reConnect(that);}, 1000*10);        }    }    static subscribe_queue(queue,onMsg){       return new MqConsumer(&#39;/queue/&#39;+queue,onMsg);    }    static subscribe_topic(queue,onMsg){        //测试过，暂时使用不了        return new MqConsumer(&#39;/topic/&#39;+queue,onMsg);    }}</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>可以断线重连，一段时间后连接会自动断掉，原因我知道</li><li>queue使用正常，topic收不到消息不能正常使用，可能是我哪里设置有问题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;stompjs下载，（不要用npm安装stomp）&quot;&gt;&lt;a href=&quot;#stompjs下载，（不要用npm安装stomp）&quot; class=&quot;headerlink&quot; title=&quot;stompjs下载，（不要用npm安装stomp）&quot;&gt;&lt;/a&gt;stompjs下载，（
      
    
    </summary>
    
    
      <category term="前端" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="rabbitmq" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/rabbitmq/"/>
    
      <category term="taro" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/taro/"/>
    
      <category term="小程序" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="stomp" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/stomp/"/>
    
  </entry>
  
  <entry>
    <title>RESTClient笔记</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/11/%E5%B7%A5%E5%85%B7/RESTClient%E7%AC%94%E8%AE%B0/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/11/%E5%B7%A5%E5%85%B7/RESTClient%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-10T18:58:33.000Z</published>
    <updated>2020-07-11T16:06:30.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rest-Client笔记"><a href="#Rest-Client笔记" class="headerlink" title="Rest Client笔记"></a>Rest Client笔记</h1><h2 id="Rest-Client是什么"><a href="#Rest-Client是什么" class="headerlink" title="Rest Client是什么"></a>Rest Client是什么</h2><p>  是一个vscode插件，可以用它来进行http请求，GET,POST,PUT,DELETE都支持，这样测试接口在vscode也能进行，不用apiPost，浏览器等工具了</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li>安装该插件</li><li>新建*.http这种以http为后缀的文件</li><li>文件内容编辑<pre><code class="js">@url=http://localhost:3333  //声明变量//###  表示一个请求### //接口1 get请求，接收html内容，带了参数aaGET {{url}}?aa=1111</code></pre></li></ul><pre><code>### //接口2 post请求，接收json，带了body请求体POST {{url}}content-type: application/json//声明接收json，跟请求体之间空一行{    &quot;name&quot;:&quot;21111&quot;,    &quot;name2&quot;:&quot;22222&quot;,    &quot;type&quot;:1}### //接口3  请求头里带token认证POST {{url}}content-type: application/jsonAuthorization: token xxx{    &quot;name&quot;:&quot;21111&quot;,    &quot;name2&quot;:&quot;22222&quot;,    &quot;type&quot;:1}</code></pre><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Rest-Client笔记&quot;&gt;&lt;a href=&quot;#Rest-Client笔记&quot; class=&quot;headerlink&quot; title=&quot;Rest Client笔记&quot;&gt;&lt;/a&gt;Rest Client笔记&lt;/h1&gt;&lt;h2 id=&quot;Rest-Client是什么&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="工具" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Rest" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/Rest/"/>
    
      <category term="http请求" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/http%E8%AF%B7%E6%B1%82/"/>
    
      <category term="vscode插件" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/vscode%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>adonisjs笔记</title>
    <link href="https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/11/%E5%90%8E%E7%AB%AF/adonisjs%E7%AC%94%E8%AE%B0/"/>
    <id>https://ngy198888.github.io/NGY198888.gtihub.io/2020/07/11/%E5%90%8E%E7%AB%AF/adonisjs%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-10T18:57:34.000Z</published>
    <updated>2020-07-11T16:07:21.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adonisjs笔记"><a href="#adonisjs笔记" class="headerlink" title="adonisjs笔记"></a>adonisjs笔记</h1><h2 id="安装adonis"><a href="#安装adonis" class="headerlink" title="安装adonis"></a>安装adonis</h2><ul><li><p><code>cnpm i -g adonis-cli</code> 安装</p></li><li><p><code>adonis new myapp</code>   新建项目</p></li><li><p><code>adonis  serve --dev</code>  启动项目</p><h2 id="使用adonis"><a href="#使用adonis" class="headerlink" title="使用adonis"></a>使用adonis</h2></li><li><p>新建项目后，命令使用</p><ul><li><code>adonis make:controller User --http</code> 会新建一个UserController </li><li><code>adonis make:model User</code> 会新建一个User的model </li></ul></li><li><p>控制器的接口</p><pre><code class="js">---------------请求体----------------GET url/index?aa=1111content-type: application/json{    &quot;name&quot;:&quot;21111&quot;,    &quot;name2&quot;:&quot;22222&quot;,    &quot;type&quot;:1}---------------接口入口----------------  async index({request}){////解构出request参数        console.log(request.all());        // { aa: &#39;1111&#39;, name: &#39;21111&#39;, name2: &#39;22222&#39;, type: 1 }        console.log(request.get());//{ aa: &#39;1111&#39; }        console.log(request.body);//{ name: &#39;21111&#39;, name2: &#39;22222&#39;, type: 1 }        console.log(request.only([&#39;name&#39;,&#39;type&#39;]));//{ name: &#39;21111&#39;, type: 1 }        console.log(request.except([&#39;name2&#39;,&#39;type&#39;]));//{ aa: &#39;1111&#39;, name: &#39;21111&#39; }   }</code></pre></li><li><p>model示例</p><pre><code class="js">&#39;use strict&#39;const Model = use(&#39;Model&#39;)class Product extends Model {}module.exports = Product</code></pre></li><li><p>路由<br>添加路由<code>Route.get(&#39;/&#39;,&#39;SetController.index&#39;)</code>,访问/目录就会进入SetController.index方法<br>##使用mongodb</p><h3 id="安装lucid-mongo"><a href="#安装lucid-mongo" class="headerlink" title="安装lucid-mongo"></a>安装lucid-mongo</h3><p><code>adonis install lucid-mongo -s</code></p><h3 id="lucid-mongo版本用法"><a href="#lucid-mongo版本用法" class="headerlink" title="lucid-mongo版本用法"></a>lucid-mongo版本用法</h3><pre><code class="js">// version 2 styleconst users =  await User.where({ or: [{ age: { gte: 18, lte: 30 }}, { is_blocked: { exists: false } }] }).sort({ age: -1 }).fetch()// version 3 styleconst users =  await User.where({ $or: [{ age: { $gte: 18, $lte: 30 }}, { is_blocked: { $exists: false } }] }).sort({ age: -1 }).fetch()</code></pre></li></ul><h3 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a>代码配置</h3><pre><code class="js">const providers = [  // ...  &#39;lucid-mongo/providers/LucidMongoProvider&#39;]const aceProviders = [  // ...  &#39;lucid-mongo/providers/MigrationsProvider&#39;]</code></pre><h3 id="配置config-database-js"><a href="#配置config-database-js" class="headerlink" title="配置config/database.js"></a>配置<code>config/database.js</code></h3><pre><code class="js">module.exports = {  connection: Env.get(&#39;DB_CONNECTION&#39;, &#39;mongodb&#39;),  mongodb: {    client: &#39;mongodb&#39;,    connectionString: Env.get(&#39;DB_CONNECTION_STRING&#39;, &#39;&#39;),    connection: {      host: Env.get(&#39;DB_HOST&#39;, &#39;localhost&#39;),      port: Env.get(&#39;DB_PORT&#39;, 27017),      username: Env.get(&#39;DB_USER&#39;, &#39;admin&#39;),      password: Env.get(&#39;DB_PASSWORD&#39;, &#39;&#39;),      database: Env.get(&#39;DB_DATABASE&#39;, &#39;adonis&#39;),      options: {        // replicaSet: Env.get(&#39;DB_REPLICA_SET&#39;, &#39;&#39;)        // ssl: Env.get(&#39;DB_SSL, &#39;&#39;)        // connectTimeoutMS: Env.get(&#39;DB_CONNECT_TIMEOUT_MS&#39;, 15000),        // socketTimeoutMS: Env.get(&#39;DB_SOCKET_TIMEOUT_MS&#39;, 180000),        // w: Env.get(&#39;DB_W, 0),        // readPreference: Env.get(&#39;DB_READ_PREFERENCE&#39;, &#39;secondary&#39;),        // authSource: Env.get(&#39;DB_AUTH_SOURCE&#39;, &#39;&#39;),        // authMechanism: Env.get(&#39;DB_AUTH_MECHANISM&#39;, &#39;&#39;),        // other options      }    }  }}</code></pre><h3 id="配置认证config-auth-js"><a href="#配置认证config-auth-js" class="headerlink" title="配置认证config/auth.js"></a>配置认证config/auth.js</h3><pre><code class="js">  session: {    serializer: &#39;LucidMongo&#39;,    model: &#39;App/Models/User&#39;,    scheme: &#39;session&#39;,    uid: &#39;email&#39;,    password: &#39;password&#39;  },  basic: {    serializer: &#39;LucidMongo&#39;,    model: &#39;App/Models/User&#39;,    scheme: &#39;basic&#39;,    uid: &#39;email&#39;,    password: &#39;password&#39;  },  jwt: {    serializer: &#39;LucidMongo&#39;,    model: &#39;App/Models/User&#39;,    token: &#39;App/Models/Token&#39;,    scheme: &#39;jwt&#39;,    uid: &#39;email&#39;,    password: &#39;password&#39;,    expiry: &#39;20m&#39;,    options: {      secret: &#39;self::app.appKey&#39;    }  },  api: {    serializer: &#39;LucidMongo&#39;,    scheme: &#39;api&#39;,    model: &#39;App/Models/User&#39;,    token: &#39;App/Models/Token&#39;,    uid: &#39;username&#39;,    password: &#39;&#39;,    expiry: &#39;30d&#39;,  },</code></pre><h3 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h3><pre><code class="js">const users =  await User.all()const users =  await User.where(&#39;name&#39;, &#39;peter&#39;).fetch()const users =  await User.where({ name: &#39;peter&#39; })  .limit(10).skip(20).fetch()const users =  await User.where({  $or: [    { gender: &#39;female&#39;, age: { $gte: 20 } },     { gender: &#39;male&#39;, age: { $gte: 22 } }  ]}).fetch()const user =  await User  .where(&#39;name&#39;).eq(&#39;peter&#39;)  .where(&#39;age&#39;).gt(18).lte(60)  .sort(&#39;-age&#39;)  .first()const users =  await User  .where({ age: { $gte: 18 } })  .sort({ age: -1 })  .fetch()const users =  await User  .where(&#39;age&#39;, &#39;&gt;=&#39;, 18)  .fetch()const users =  await User  .where(&#39;age&#39;).gt(18)  .paginate(2, 100)const users =  await User.where(function() {  this.where(&#39;age&#39;, &#39;&gt;=&#39;, 18)}).fetch()// to query geo near you need add 2d or 2dsphere index in migration fileconst images = await Image  .where(location)  .near({ center: [1, 1] })  .maxDistance(5000)  .fetch()const images = await Image  .where(location)  .near({ center: [1, 1], sphere: true })  .maxDistance(5000)  .fetch()</code></pre><h3 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h3><pre><code class="js">  // count without group by  const count = await Customer.count()  // count group by `position`  const count_rows = await Customer    .where({ invited: { $exist: true } })    .count(&#39;position&#39;)  // max age without group by  const max = await Employee.max(&#39;age&#39;)  // sum `salary` group by `department_id`  const total_rows = await Employee    .where(active, true)    .sum(&#39;salary&#39;, &#39;department_id&#39;)  // average group by `department_id` and `role_id`  const avg_rows = await Employee    .where(active, true)    .avg(&#39;salary&#39;, { department: &#39;$department_id&#39;, role: &#39;$role_id&#39; })</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;adonisjs笔记&quot;&gt;&lt;a href=&quot;#adonisjs笔记&quot; class=&quot;headerlink&quot; title=&quot;adonisjs笔记&quot;&gt;&lt;/a&gt;adonisjs笔记&lt;/h1&gt;&lt;h2 id=&quot;安装adonis&quot;&gt;&lt;a href=&quot;#安装adonis&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="nodejs" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/categories/%E5%90%8E%E7%AB%AF/nodejs/"/>
    
    
      <category term="adonisjs" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/adonisjs/"/>
    
      <category term="nodejs" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/nodejs/"/>
    
      <category term="lucid-mongo" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/lucid-mongo/"/>
    
      <category term="CRUD" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/CRUD/"/>
    
      <category term="接口" scheme="https://ngy198888.github.io/NGY198888.gtihub.io/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
</feed>
